
import React, { useState, useCallback } from 'react';
import PageHeader from '../components/common/PageHeader';
import Button from '../components/common/Button';
import Table from '../components/common/Table';
import Modal from '../components/common/Modal';
import Input from '../components/common/Input';
import Select from '../components/common/Select';
import { JournalEntry, JournalEntryDetail, Account } from '../types';
import { mockJournalEntries, mockAccounts, generateId } from '../data/mockData';
import Card from '../components/common/Card';
import { useLanguage } from '../contexts/LanguageContext';

const IconPlus = () => <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" /></svg>;
const IconEye = () => <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4"><path d="M10 12.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" /><path fillRule="evenodd" d="M.664 10.59a1.651 1.651 0 010-1.186A10.004 10.004 0 0110 3c4.257 0 7.893 2.66 9.336 6.41.147.381.146.804 0 1.186A10.004 10.004 0 0110 17c-4.257 0-7.893 2.66-9.336-6.41zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" /></svg>;

const initialJournalEntryFormState: Omit<JournalEntry, 'id' | 'details'> = {
  date: new Date().toISOString().split('T')[0],
  description: '',
  referenceId: '',
  isAutoGenerated: false,
};

const initialDetailState: Omit<JournalEntryDetail, 'accountName'> = { accountId: '', debit: 0, credit: 0 };

interface SelectOption {
  value: string;
  label: string;
}

const JournalEntriesPage: React.FC = () => {
  const { t, language } = useLanguage();
  const locale = language === 'ar' ? 'ar-AE' : 'en-US';

  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>(mockJournalEntries);
  const [accounts] = useState<Account[]>(mockAccounts);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [viewingEntry, setViewingEntry] = useState<JournalEntry | null>(null); 
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  const [entryForm, setEntryForm] = useState(initialJournalEntryFormState);
  const [entryDetails, setEntryDetails] = useState<Omit<JournalEntryDetail, 'accountName'>[]>([initialDetailState, initialDetailState]);
  
  const accountOptions: SelectOption[] = accounts.map((acc): SelectOption => ({ value: acc.id, label: `${acc.code} - ${acc.name}` })); 

  const formatCurrency = (value: number) => value.toLocaleString(locale, { minimumFractionDigits:2, maximumFractionDigits:2 });
  const formatDate = (dateString: string) => new Date(dateString).toLocaleDateString(locale);

  const columns = React.useMemo(() => [
    { Header: 'common.date', accessor: 'date' as keyof JournalEntry, Cell: (value: string) => formatDate(value) },
    { Header: 'common.description', accessor: 'description' as keyof JournalEntry },
    { Header: 'journalEntries.referenceId', accessor: 'referenceId' as keyof JournalEntry, Cell: (value: string) => value || '-' },
    { Header: 'journalEntries.totalDebit', accessor: (row: JournalEntry) => row.details.reduce((sum, d) => sum + d.debit, 0), Cell: (value: number) => `${t('common.amount_aed').split(' ')[1]} ${formatCurrency(value)}`},
    { Header: 'journalEntries.totalCredit', accessor: (row: JournalEntry) => row.details.reduce((sum, d) => sum + d.credit, 0), Cell: (value: number) => `${t('common.amount_aed').split(' ')[1]} ${formatCurrency(value)}`},
    { Header: 'common.type', accessor: 'isAutoGenerated' as keyof JournalEntry, Cell: (value: boolean) => value ? 
        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-700">{t('journalEntries.autoType')}</span> : 
        <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-700">{t('journalEntries.manualType')}</span>
    },
  ], [t, formatDate, formatCurrency]);

  const handleViewEntry = (entry: JournalEntry) => {
    setViewingEntry(entry);
    setIsModalOpen(true);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEntryForm(prev => ({ ...prev, [name]: value }));
  };

  const handleDetailChange = (index: number, field: keyof Omit<JournalEntryDetail, 'accountName'>, value: string) => {
    const newDetails = [...entryDetails];
    // @ts-ignore
    newDetails[index][field] = (field === 'debit' || field === 'credit') ? parseFloat(value) || 0 : value;
    setEntryDetails(newDetails);
  };

  const addDetailRow = () => setEntryDetails([...entryDetails, initialDetailState]);
  const removeDetailRow = (index: number) => setEntryDetails(entryDetails.filter((_, i) => i !== index));
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const totalDebits = entryDetails.reduce((sum, d) => sum + d.debit, 0);
    const totalCredits = entryDetails.reduce((sum, d) => sum + d.credit, 0);

    if (totalDebits !== totalCredits) {
      alert(t('journalEntries.balance_error'));
      return;
    }
    if (entryDetails.some(d => !d.accountId)) {
      alert(t('journalEntries.all_lines_need_account'));
      return;
    }

    const newEntry: JournalEntry = {
      id: generateId(),
      ...entryForm,
      details: entryDetails.map(d => ({
          ...d,
          accountName: accounts.find(acc => acc.id === d.accountId)?.name || t('common.unknown_account')
      })),
    };
    setJournalEntries(prev => [newEntry, ...prev]);
    setIsCreateModalOpen(false);
    setEntryForm(initialJournalEntryFormState);
    setEntryDetails([initialDetailState, initialDetailState]);
  };

  const renderRowActions = useCallback((entry: JournalEntry) => (
    <Button variant="outline" size="sm" onClick={() => handleViewEntry(entry)} leftIcon={<IconEye />}>
      {t('common.view')}
    </Button>
  ), [t, handleViewEntry]);
  
  const totalModalDebits = viewingEntry?.details.reduce((sum, d) => sum + d.debit, 0) || 0;
  const totalModalCredits = viewingEntry?.details.reduce((sum, d) => sum + d.credit, 0) || 0;

  const totalFormDebits = entryDetails.reduce((sum, d) => sum + d.debit, 0);
  const totalFormCredits = entryDetails.reduce((sum, d) => sum + d.credit, 0);


  return (
    <div>
      <PageHeader title={t('journalEntries.pageTitle')} subtitle={t('journalEntries.pageSubtitle')}>
        <Button onClick={() => setIsCreateModalOpen(true)} leftIcon={<IconPlus />}>
          {t('journalEntries.addNew')}
        </Button>
      </PageHeader>

      <Table<JournalEntry> columns={columns} data={journalEntries} renderRowActions={renderRowActions} />

      <Modal 
        isOpen={isModalOpen && viewingEntry != null} 
        onClose={() => setIsModalOpen(false)} 
        title={t('journalEntries.viewEntryTitle', { id: viewingEntry?.id ? viewingEntry.id.substring(0,8) : ""})} 
        size="lg"
      >
        {viewingEntry && (
          <div>
            <div className="grid grid-cols-2 gap-4 mb-4">
              <p><strong>{t('common.date')}:</strong> {formatDate(viewingEntry.date)}</p>
              <p><strong>{t('journalEntries.referenceId')}:</strong> {viewingEntry.referenceId || t('common.na')}</p>
              <p className="col-span-2"><strong>{t('common.description')}:</strong> {viewingEntry.description}</p>
              <p><strong>{t('common.type')}:</strong> {viewingEntry.isAutoGenerated ? t('journalEntries.autoType') : t('journalEntries.manualType')}</p>
            </div>
            <h4 className="font-semibold mb-2">{t('journalEntries.details')}</h4>
            <div className="overflow-x-auto border rounded-md">
                <table className="min-w-full text-sm">
                    <thead className="bg-secondary-50">
                        <tr>
                            <th className="p-2 text-start">{t('journalEntries.account')}</th>
                            <th className="p-2 text-end">{t('journalEntries.debitAed')}</th>
                            <th className="p-2 text-end">{t('journalEntries.creditAed')}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {viewingEntry.details.map((detailItem, index) => ( 
                            <tr key={index} className="border-t">
                                <td className="p-2">{detailItem.accountName} ({t('common.id_prefix')}${detailItem.accountId.substring(0,4)}...)</td>
                                <td className="p-2 text-end">{detailItem.debit > 0 ? formatCurrency(detailItem.debit) : '-'}</td>
                                <td className="p-2 text-end">{detailItem.credit > 0 ? formatCurrency(detailItem.credit) : '-'}</td>
                            </tr>
                        ))}
                    </tbody>
                    <tfoot className="bg-secondary-100 font-semibold border-t-2 border-secondary-300">
                        <tr>
                            <td className="p-2 text-end">{t('journalEntries.totals')}</td>
                            <td className="p-2 text-end">{formatCurrency(totalModalDebits)}</td>
                            <td className="p-2 text-end">{formatCurrency(totalModalCredits)}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
          </div>
        )}
      </Modal>

      <Modal isOpen={isCreateModalOpen} onClose={() => setIsCreateModalOpen(false)} title={t('journalEntries.createEntryTitle')} size="xl">
        <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <Input name="date" label={t('common.date')} type="date" value={entryForm.date} onChange={handleInputChange} required />
                <Input name="referenceId" label={t('journalEntries.referenceIdOptional')} value={entryForm.referenceId || ''} onChange={handleInputChange} />
                <Input name="description" label={t('common.description')} value={entryForm.description} onChange={handleInputChange} required wrapperClassName="md:col-span-2" />
            </div>

            <Card title={t('journalEntries.entryDetails')} className="mb-4">
                {entryDetails.map((detail, index) => (
                    <div key={index} className="grid grid-cols-12 gap-2 mb-2 items-center border-b pb-2">
                        <div className="col-span-12 md:col-span-5">
                            <Select 
                                label={t('journalEntries.account')}
                                options={accountOptions}
                                value={detail.accountId}
                                onChange={(e) => handleDetailChange(index, 'accountId', e.target.value)}
                                placeholder={t('journalEntries.select_account')}
                                wrapperClassName="mb-0"
                                required
                            />
                        </div>
                        <div className="col-span-6 md:col-span-3">
                            <Input label={t('journalEntries.debitAed')} type="number" step="0.01" min="0" value={detail.debit} onChange={(e) => handleDetailChange(index, 'debit', e.target.value)} wrapperClassName="mb-0"/>
                        </div>
                         <div className="col-span-6 md:col-span-3">
                            <Input label={t('journalEntries.creditAed')} type="number" step="0.01" min="0" value={detail.credit} onChange={(e) => handleDetailChange(index, 'credit', e.target.value)} wrapperClassName="mb-0"/>
                        </div>
                        <div className="col-span-12 md:col-span-1 flex items-end justify-end md:justify-start pb-0 md:pb-1">
                             {entryDetails.length > 2 && <Button type="button" variant="danger" size="sm" onClick={() => removeDetailRow(index)}>X</Button>}
                        </div>
                    </div>
                ))}
                <Button type="button" variant="outline" size="sm" onClick={addDetailRow} leftIcon={<IconPlus />}>{t('journalEntries.addRow')}</Button>
            </Card>
            
            <div className="flex justify-end font-semibold text-lg p-2 bg-secondary-50 rounded rtl:flex-row-reverse">
                <span className="me-8 rtl:me-0 rtl:ms-8">{t('journalEntries.debits')} {t('common.amount_aed').split(' ')[1]} {formatCurrency(totalFormDebits)}</span>
                <span>{t('journalEntries.credits')} {t('common.amount_aed').split(' ')[1]} {formatCurrency(totalFormCredits)}</span>
            </div>
             {totalFormDebits !== totalFormCredits && <p className="text-red-500 text-sm text-end mt-1">{t('journalEntries.balance_error')}</p>}

            <div className="mt-6 flex justify-end space-x-3 rtl:space-x-reverse">
                <Button type="button" variant="secondary" onClick={() => setIsCreateModalOpen(false)}>{t('common.cancel')}</Button>
                <Button type="submit" variant="primary" disabled={totalFormDebits !== totalFormCredits || totalFormDebits === 0}>{t('journalEntries.save_entry')}</Button>
            </div>
        </form>
      </Modal>

    </div>
  );
};

export default JournalEntriesPage;
