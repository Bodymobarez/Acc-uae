
export enum AccountType {
  ASSET = "Asset",
  LIABILITY = "Liability",
  EQUITY = "Equity",
  REVENUE = "Revenue",
  EXPENSE = "Expense",
}

export interface Account {
  id: string;
  code: string;
  name: string; 
  type: AccountType;
  balance: number; 
  isControlAccount?: boolean; 
  subsidiaryLedger?: string; 
}

export interface Client {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  vatNumber?: string;
}

export interface Supplier {
  id: string;
  name: string;
  serviceType: string;
  contactEmail?: string;
  phone?: string;
  vatNumber?: string;
}

export interface TourismService {
  id: string;
  name: string; 
  description?: string;
  defaultCost: number;
  defaultPrice: number;
  supplierId?: string;
}

// HR Module: Department Interface
export interface Department {
  id: string;
  name: string;
}

// HR Module: JobTitle Interface
export interface JobTitle {
  id: string;
  name: string;
  departmentId?: string; // Optional: if job titles are specific to departments
}

export interface Employee {
  id: string;
  name: string;
  email: string;
  departmentId: string; 
  jobTitleId: string;   
  hireDate?: string;    
  basicSalary?: number; 
  customerServiceEmployeeId?: string; 
}

export enum ServiceType {
  GENERIC = "Generic",
  HOTEL = "Hotel",
  FLIGHT = "Flight",
  TRANSFER = "Transfer",
  CAR_RENTAL = "CarRental",
  VISA = "Visa",
  TRAIN_TICKET = "TrainTicket",
}

export interface HotelServiceDetails {
  voucherNumber?: string;
  country?: string;
  city?: string;
  hotelName?: string;
  region?: 'DOMESTIC' | 'INTERNATIONAL' | string; 
  pnr?: string;
  originCountry?: string;
  gds?: string; 
  issuingStaff?: string;
  bookingStaff?: string;
  issueDate?: string; 
  supplierConfNo?: string;
  hotelConfNo?: string;
  roomType?: string;
  checkInDate?: string; 
  checkOutDate?: string; 
  branch?: string; 
  ratePerNight?: number;
  mealsPlan?: string; 
  noOfAdults?: number;
  noOfChildren?: number;
  noOfRooms?: number;
  noOfNights?: number;
  guests?: string; 
  bookingDetails?: string; 
  additionalReference?: string; 
  couponRemark?: string; 
  customerEmpNo?: string;
  termsAndConditions?: boolean;
  pickUp?: boolean;
  dropOff?: boolean;
}

export interface FlightServiceDetails { pnr?: string; flightNumber?: string; from?: string; to?: string; departureDate?: string; arrivalDate?: string; }
export interface TransferServiceDetails { type?: string; from?: string; to?: string; date?: string; time?: string; }
export interface CarRentalServiceDetails { type?: string; from?: string; to?: string; startDate?: string; endDate?: string; }
export interface VisaServiceDetails { country?: string; visaType?: string; validity?: string; }
export interface TrainTicketServiceDetails { from?: string; to?: string; departureDate?: string; class?: string; }


export interface BookingServiceItem {
  id: string; 
  serviceId: string; 
  serviceName: string; 
  serviceType: ServiceType;
  cost: number;
  price: number; 
  quantity: number;
  hotelDetails?: HotelServiceDetails;
  flightDetails?: FlightServiceDetails; 
  transferDetails?: TransferServiceDetails; 
  carRentalDetails?: CarRentalServiceDetails;
  visaDetails?: VisaServiceDetails;
  trainTicketDetails?: TrainTicketServiceDetails;
}

export enum BookingStatus {
  PENDING = "Pending",
  CONFIRMED = "Confirmed",
  CANCELLED = "Cancelled",
  COMPLETED = "Completed",
}

export enum BookingCategory {
  DOMESTIC = "DOMESTIC",
  INTERNATIONAL = "INTERNATIONAL",
}

export interface Booking {
  id: string;
  fileNumber: string; 
  clientId: string;
  employeeId: string; 
  customerServiceEmployeeId?: string; 
  bookingDate: string; 
  bookingCategory: BookingCategory;
  services: BookingServiceItem[];
  totalCost: number; 
  totalPrice: number; 
  vatAmount: number; 
  netProfit: number; 
  employeeCommissionPercentage: number; 
  employeeCommissionAmount: number; 
  customerServiceCommissionPercentage: number; 
  customerServiceCommissionAmount: number;   
  status: BookingStatus;
  notes?: string;
  invoiceNumber?: string | null; 
}

export enum TransactionType {
  PAYMENT = "Payment",
  COLLECTION = "Collection",
}

export interface FinancialTransaction {
  id: string;
  date: string;
  type: TransactionType;
  partyId: string; 
  partyType: 'Client' | 'Supplier';
  partyName: string; 
  amount: number;
  description: string;
  relatedBookingId?: string;
  paymentMethod?: string; 
  referenceNumber?: string;
}

export interface JournalEntryDetail {
  accountId: string;
  accountName: string; 
  debit: number;
  credit: number;
}

export interface JournalEntry {
  id: string;
  date: string;
  description: string;
  referenceId?: string; 
  details: JournalEntryDetail[];
  isAutoGenerated?: boolean; 
}

export interface User {
  id: string;
  username: string;
  fullName: string;
  email: string;
  role: 'Admin' | 'Accountant' | 'Sales Agent' | 'Manager'; 
  isActive: boolean;
}

export interface ReportParameter {
  name: string;
  label: string; 
  type: 'date' | 'select' | 'text';
  options?: { value: string; label: string }[]; 
}

export interface InvoiceItem {
  description: string;
  quantity: number;
  unitPrice: number; 
  total: number; 
}

export interface Invoice {
  id: string;
  invoiceNumber: string;
  bookingFileNumber: string;
  issueDate: string;
  dueDate?: string;
  clientName: string;
  clientAddress?: string;
  clientVatNumber?: string;
  items: InvoiceItem[];
  subtotal: number; 
  vatRate: number; 
  vatAmount: number; 
  grandTotal: number; 
  notes?: string;
  companyName: string;
  companyAddress: string;
  companyVatNumber: string;
  bookingCategory?: BookingCategory; 
}

// HR Module - Phase 2: Attendance, Leave, Penalties

export enum AttendanceStatus {
  PRESENT = "Present",
  ABSENT = "Absent",
  LATE = "Late",
  ON_LEAVE = "OnLeave",
}

export interface AttendanceRecord {
  id: string;
  employeeId: string;
  date: string; // YYYY-MM-DD
  checkInTime?: string; // HH:MM
  checkOutTime?: string; // HH:MM
  status: AttendanceStatus;
  notes?: string;
}

export interface LeaveType {
  id: string;
  name: string;
  defaultDaysAllowed?: number;
}

export enum LeaveRequestStatus {
  PENDING = "Pending",
  APPROVED = "Approved",
  REJECTED = "Rejected",
}

export interface LeaveRequest {
  id: string;
  employeeId: string;
  leaveTypeId: string;
  startDate: string; // YYYY-MM-DD
  endDate: string; // YYYY-MM-DD
  reason?: string;
  status: LeaveRequestStatus;
  requestedDate: string; // YYYY-MM-DD
  approvedBy?: string; // employeeId of approver
  approvedDate?: string; // YYYY-MM-DD
}

export interface PenaltyType {
  id: string;
  name: string; // e.g., "Late Arrival", "Unexcused Absence"
  description?: string;
  deductionAmount?: number; // Fixed amount to deduct from salary
  deductionDays?: number;   // Number of days salary to deduct
}

export interface EmployeePenalty {
  id: string;
  employeeId: string;
  penaltyTypeId: string;
  date: string; // Date penalty was issued
  reason: string;
  amountDeducted?: number; // Actual amount decided for this instance
  daysDeducted?: number;   // Actual days decided for this instance
  notes?: string;
}

// HR Module - Phase 3: Payroll

export enum PayrollPeriodStatus {
  OPEN = "Open",
  PROCESSING = "Processing",
  CLOSED = "Closed",
}

export interface PayrollPeriod {
  id: string;
  name: string; // e.g., "July 2024 Payroll"
  startDate: string; // YYYY-MM-DD
  endDate: string; // YYYY-MM-DD
  status: PayrollPeriodStatus;
}

export enum PayslipItemType {
  ADDITION = "Addition",
  DEDUCTION = "Deduction",
}

export interface PayslipItem {
  id: string;
  description: string;
  amount: number;
  type: PayslipItemType;
}

export enum PayslipStatus {
  DRAFT = "Draft",
  CALCULATED = "Calculated", // After auto-calculation from attendance, penalties
  CONFIRMED = "Confirmed", // After HR review and manual adjustments
  PAID = "Paid",
}

export interface Payslip {
  id: string;
  payrollPeriodId: string;
  employeeId: string;
  basicSalaryAtGeneration: number; // Basic salary when payslip was generated
  additions: PayslipItem[];
  deductions: PayslipItem[];
  grossSalary: number; // Basic + Additions
  // FIX: Add totalAdditions to Payslip interface
  totalAdditions: number; // Sum of additions
  totalDeductions: number; // Sum of deductions
  netSalary: number; // Gross - Deductions
  status: PayslipStatus;
  paymentDate?: string; // YYYY-MM-DD
  notes?: string;
}
